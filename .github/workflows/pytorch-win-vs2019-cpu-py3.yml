# @generated DO NOT EDIT MANUALLY
# Template is at:    .github/templates/windows_ci_workflow.yml
# Generation script: .github/scripts/generate_ci_workflows.py
name: Windows CI (pytorch-win-vs2019-cpu-py3)

on:
  pull_request:
  push:
    branches:
      - master
      - release/*
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: pytorch-win-vs2019-cpu-py3
  BUILD_WHEEL: 1
  CUDA_VERSION: "cpu"
  IN_CI: 1
  JOB_BASE_NAME: test
  PYTHON_VERSION: "3.6"
  SCCACHE_BUCKET: "ossci-compiler-cache"
  TORCH_CUDA_ARCH_LIST: "5.2;7.5"
  VC_PRODUCT: "BuildTools"
  VC_VERSION: ""
  VC_YEAR: "2019"

jobs:
  build:
    runs-on: "windows.4xlarge"
    steps:
      - name: Checkout PyTorch
        uses: actions/checkout@v2
      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        run: |
          choco install vswhere -y
          .\.circleci\scripts\vs_install.ps1
      - name: Install Windows 10 SDK
        shell: powershell
        run: |
          .\.github\scripts\install_windows_sdk.ps1
      - name: Build
        shell: bash
        run: |
          .jenkins/pytorch/win-build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 30
          if-no-files-found: error
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\w\build-results
  test:
    runs-on: windows.4xlarge
    env:
      JOB_BASE_NAME: pytorch-win-vs2019-cpu-py3-test
    needs:
      - build
    steps:
      - name: Checkout PyTorch
        uses: actions/checkout@v2
      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        run: |
          choco install vswhere -y
          .\.circleci\scripts\vs_install.ps1
      - name: Install Windows 10 SDK
        shell: powershell
        run: |
          .\.github\scripts\install_windows_sdk.ps1
      - uses: actions/download-artifact@v2
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\${{ github.run_id }}\build-results
      - name: Check build-results folder
        shell: powershell
        run: |
          tree /F C:\$Env:GITHUB_RUN_ID\build-results
      # Needed for coverage in win-test.sh
      - uses: actions/setup-python@v2
        name: Setup Python3
        with:
          python-version: '3.x'
      - name: Run test scripts
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
        run: |
            .jenkins/pytorch/win-test.sh
      - uses: actions/upload-artifact@v2
        name: Store PyTorch Test Reports
        if: always()
        with:
          name: test-reports
          retention-days: 30
          if-no-files-found: error
          path:
            test/**/*.xml
  # TODO: Make this into a composite step
  render_test_results:
    if: always()
    needs:
      - test
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout PyTorch
        uses: actions/checkout@v2
        with:
          # deep clone, to allow tools/print_test_stats.py to use Git commands
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        name: Download PyTorch Test Reports
        with:
          name: test-reports
          path: test/test-reports
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        # boto3 version copied from .circleci/docker/common/install_conda.sh
        run: |
          pip install -r requirements.txt
          pip install boto3==1.16.34 junitparser rich
      - name: Output Test Results (Click Me)
        run: |
          python tools/render_junit.py test
      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py
      - name: Display and upload test statistics (Click Me)
        # temporary hack: set CIRCLE_* vars, until we update
        # tools/print_test_stats.py to natively support GitHub Actions
        env:
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_OSSCI_METRICS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_OSSCI_METRICS_SECRET_ACCESS_KEY }}
          CIRCLE_BRANCH: ${{ steps.parse-ref.outputs.branch }}
          CIRCLE_JOB: pytorch-win-vs2019-cpu-py3
          CIRCLE_PR_NUMBER: ${{ github.event.pull_request.number }}
          CIRCLE_SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          CIRCLE_TAG: ${{ steps.parse-ref.outputs.tag }}
          CIRCLE_WORKFLOW_ID: ${{ github.run_id }} # dunno if this corresponds
        run: |
          export PYTHONPATH=$PWD
          python tools/print_test_stats.py --upload-to-s3 --compare-with-s3 test
